name: Build and Release

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-desktop:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo add-apt-repository universe -y
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install frontend dependencies
        run: pnpm install

      - name: Use Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Build application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__
          releaseName: 'Paper Polisher v__VERSION__'
          releaseBody: 'See the release page for more details.'
          releaseDraft: true
          prerelease: false
          includeUpdaterJson: false
          includeRelease: true
          args: --target ${{ matrix.platform == 'windows-latest' && 'x86_64-pc-windows-msvc' || (matrix.platform == 'macos-latest' && 'aarch64-apple-darwin' || 'x86_64-unknown-linux-gnu') }}

  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android, armv7-linux-androideabi, i686-linux-android, x86_64-linux-android

      - name: Install Android NDK
        run: |
          echo "y" | sudo ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install "ndk;25.2.9519653" "build-tools;34.0.0" "platforms;android-34"
          echo "ANDROID_NDK_HOME=${ANDROID_HOME}/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: pnpm install

      - name: Install Android tools
        run: |
          cargo install tauri-cli --version "^2.0.0-beta"
          cargo install cargo-ndk

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Use Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Initialize Android project
        run: |
          pnpm tauri android init
          
      - name: Build Android APK
        run: |
          pnpm tauri android build --apk

      - name: Build Android AAB
        run: |
          pnpm tauri android build --bundle aab

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: |
            src-tauri/gen/android/app/build/outputs/apk/release/*.apk
            src-tauri/gen/android/app/build/outputs/bundle/release/*.aab
          retention-days: 5

      - name: Rename Android artifacts with timestamp
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          mkdir -p renamed_artifacts
          for file in src-tauri/gen/android/app/build/outputs/apk/release/*.apk; do
            filename=$(basename "$file")
            extension="${filename##*.}"
            newname="${filename%.*}_${TIMESTAMP}.${extension}"
            cp "$file" "renamed_artifacts/$newname"
          done
          for file in src-tauri/gen/android/app/build/outputs/bundle/release/*.aab; do
            filename=$(basename "$file")
            extension="${filename##*.}"
            newname="${filename%.*}_${TIMESTAMP}.${extension}"
            cp "$file" "renamed_artifacts/$newname"
          done

      - name: Create Android Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            renamed_artifacts/*
          draft: true
          prerelease: false
          name: 'Paper Polisher Android v${{ github.ref_name }}'
          body: '详情请参阅发布页。'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}